/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  MatchResults,
} from '@stencil/router';

export namespace Components {
  interface AppHome {}
  interface AppProfile {
    'match': MatchResults;
  }
  interface AppRoot {}
  interface DocHeader {}
  interface DocPage {
    'heading': string;
    'subtitle': string;
  }
  interface DocPageButton {}
  interface DocPageHome {}
  interface DocPageNotFound {}
  interface DocPageSpinner {}
  interface DocRoot {}
  interface DocRouter {}
  interface DocSidebar {}
  interface DocSnippet {
    'snippet': string;
  }
}

declare global {


  interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {}
  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };

  interface HTMLAppProfileElement extends Components.AppProfile, HTMLStencilElement {}
  var HTMLAppProfileElement: {
    prototype: HTMLAppProfileElement;
    new (): HTMLAppProfileElement;
  };

  interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {}
  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };

  interface HTMLDocHeaderElement extends Components.DocHeader, HTMLStencilElement {}
  var HTMLDocHeaderElement: {
    prototype: HTMLDocHeaderElement;
    new (): HTMLDocHeaderElement;
  };

  interface HTMLDocPageElement extends Components.DocPage, HTMLStencilElement {}
  var HTMLDocPageElement: {
    prototype: HTMLDocPageElement;
    new (): HTMLDocPageElement;
  };

  interface HTMLDocPageButtonElement extends Components.DocPageButton, HTMLStencilElement {}
  var HTMLDocPageButtonElement: {
    prototype: HTMLDocPageButtonElement;
    new (): HTMLDocPageButtonElement;
  };

  interface HTMLDocPageHomeElement extends Components.DocPageHome, HTMLStencilElement {}
  var HTMLDocPageHomeElement: {
    prototype: HTMLDocPageHomeElement;
    new (): HTMLDocPageHomeElement;
  };

  interface HTMLDocPageNotFoundElement extends Components.DocPageNotFound, HTMLStencilElement {}
  var HTMLDocPageNotFoundElement: {
    prototype: HTMLDocPageNotFoundElement;
    new (): HTMLDocPageNotFoundElement;
  };

  interface HTMLDocPageSpinnerElement extends Components.DocPageSpinner, HTMLStencilElement {}
  var HTMLDocPageSpinnerElement: {
    prototype: HTMLDocPageSpinnerElement;
    new (): HTMLDocPageSpinnerElement;
  };

  interface HTMLDocRootElement extends Components.DocRoot, HTMLStencilElement {}
  var HTMLDocRootElement: {
    prototype: HTMLDocRootElement;
    new (): HTMLDocRootElement;
  };

  interface HTMLDocRouterElement extends Components.DocRouter, HTMLStencilElement {}
  var HTMLDocRouterElement: {
    prototype: HTMLDocRouterElement;
    new (): HTMLDocRouterElement;
  };

  interface HTMLDocSidebarElement extends Components.DocSidebar, HTMLStencilElement {}
  var HTMLDocSidebarElement: {
    prototype: HTMLDocSidebarElement;
    new (): HTMLDocSidebarElement;
  };

  interface HTMLDocSnippetElement extends Components.DocSnippet, HTMLStencilElement {}
  var HTMLDocSnippetElement: {
    prototype: HTMLDocSnippetElement;
    new (): HTMLDocSnippetElement;
  };
  interface HTMLElementTagNameMap {
    'app-home': HTMLAppHomeElement;
    'app-profile': HTMLAppProfileElement;
    'app-root': HTMLAppRootElement;
    'doc-header': HTMLDocHeaderElement;
    'doc-page': HTMLDocPageElement;
    'doc-page-button': HTMLDocPageButtonElement;
    'doc-page-home': HTMLDocPageHomeElement;
    'doc-page-not-found': HTMLDocPageNotFoundElement;
    'doc-page-spinner': HTMLDocPageSpinnerElement;
    'doc-root': HTMLDocRootElement;
    'doc-router': HTMLDocRouterElement;
    'doc-sidebar': HTMLDocSidebarElement;
    'doc-snippet': HTMLDocSnippetElement;
  }
}

declare namespace LocalJSX {
  interface AppHome {}
  interface AppProfile {
    'match'?: MatchResults;
  }
  interface AppRoot {}
  interface DocHeader {}
  interface DocPage {
    'heading'?: string;
    'subtitle'?: string;
  }
  interface DocPageButton {}
  interface DocPageHome {}
  interface DocPageNotFound {}
  interface DocPageSpinner {}
  interface DocRoot {}
  interface DocRouter {}
  interface DocSidebar {}
  interface DocSnippet {
    'snippet'?: string;
  }

  interface IntrinsicElements {
    'app-home': AppHome;
    'app-profile': AppProfile;
    'app-root': AppRoot;
    'doc-header': DocHeader;
    'doc-page': DocPage;
    'doc-page-button': DocPageButton;
    'doc-page-home': DocPageHome;
    'doc-page-not-found': DocPageNotFound;
    'doc-page-spinner': DocPageSpinner;
    'doc-root': DocRoot;
    'doc-router': DocRouter;
    'doc-sidebar': DocSidebar;
    'doc-snippet': DocSnippet;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'app-home': LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
      'app-profile': LocalJSX.AppProfile & JSXBase.HTMLAttributes<HTMLAppProfileElement>;
      'app-root': LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
      'doc-header': LocalJSX.DocHeader & JSXBase.HTMLAttributes<HTMLDocHeaderElement>;
      'doc-page': LocalJSX.DocPage & JSXBase.HTMLAttributes<HTMLDocPageElement>;
      'doc-page-button': LocalJSX.DocPageButton & JSXBase.HTMLAttributes<HTMLDocPageButtonElement>;
      'doc-page-home': LocalJSX.DocPageHome & JSXBase.HTMLAttributes<HTMLDocPageHomeElement>;
      'doc-page-not-found': LocalJSX.DocPageNotFound & JSXBase.HTMLAttributes<HTMLDocPageNotFoundElement>;
      'doc-page-spinner': LocalJSX.DocPageSpinner & JSXBase.HTMLAttributes<HTMLDocPageSpinnerElement>;
      'doc-root': LocalJSX.DocRoot & JSXBase.HTMLAttributes<HTMLDocRootElement>;
      'doc-router': LocalJSX.DocRouter & JSXBase.HTMLAttributes<HTMLDocRouterElement>;
      'doc-sidebar': LocalJSX.DocSidebar & JSXBase.HTMLAttributes<HTMLDocSidebarElement>;
      'doc-snippet': LocalJSX.DocSnippet & JSXBase.HTMLAttributes<HTMLDocSnippetElement>;
    }
  }
}


